<?php
    session_start();

    use PHPMailer\PHPMailer\PHPMailer;
    use PHPMailer\PHPMailer\Exception;

    require_once '../../vendor/composer/src/Exception.php';
    require_once '../../vendor/composer/src/PHPMailer.php';
    require_once '../../vendor/composer/src/SMTP.php';
    require_once '../../vendor/autoload.php';

    require_once "../includes/functions/getEmailGroups.php";
    include_once "../includes/functions/security.php";
    DefineSecurity();
    include_once "../db/database.php";
    include_once "../db/dbFunctions.php";

    // Prevent direct access and prevent non-admin's to access
    RestrictAdmin(CheckRole($_SESSION['User_ID']));
    defined('_DEFVAR') or exit(header('Location: ../index.php'));


    // Checking if form was submitted
    if ($_SERVER["REQUEST_METHOD"] == "POST") {
        // Reading email inputs
        $emailSubject = sanitizeData($_REQUEST['emailFormTitle']);
        $emailName = sanitizeData($_REQUEST['emailFormFullName']);
        $emailBody = $_REQUEST['emailFormTextBox'];
        $emailRecipientsJSON = json_decode($_REQUEST['email-recipient-json']); // Note: No sanitization needed because generated by JS

        $emailList = getEmailList($emailRecipientsJSON); // Obtaining emailing list from JSON object

        // Configuring email
        $mail = new PHPMailer(true);
        $mail->isSMTP(); // Remove line to view debug output
        $mail->Mailer = 'smtp';
        $mail->SMTPDebug = 0;
        $mail->SMTPAuth = TRUE;
        $mail->SMTPSecure = "tls";
        $mail->Port = 26;
        $mail->Host = "mail.cricketnovascotia.ca";
        $mail->Username = "testadmin@cricketnovascotia.ca";
        $mail->Password = "CricketNSCA";
        $mail->isHTML(true);

        // Assigning subject
        $mail->Subject = $emailSubject;

        // Assigning 'From' name
        if ($emailName != "") {
            try {
                $mail->SetFrom("testadmin@cricketnovascotia.ca", $emailName);
            } catch (Exception $e) {
                header("Location: sendEmail.php?error");  // Error: Email processing exception
            }
        }
        else {
            try {
                $mail->SetFrom("testadmin@cricketnovascotia.ca", "Test Admin");
            } catch (Exception $e) {
                header("Location: sendEmail.php?error");  // Error: Email processing exception
            }
        }

        // Adding emails to BCC
        foreach ($emailList as $email) {
            try {
                $mail->addBcc($email, "toAddress");
                if ($email != null) echo "<script> console.log('GOOD: Added " . $email . " email to BCC.') </script>";
            } catch (Exception $e) {
                if ($email != null) echo "<script> console.log('ERROR: Unable to add " . $email . " to BCC.') </script>";
            }
        }

        // Assigning body
        $mail->Body = $emailBody;
        try {
            $mail->MsgHTML($emailBody);
        } catch (Exception $e) {
            header("Location: sendEmail.php?error"); // Error: Email processing exception
        }

        // Sending email
        try {
            if ($mail->Send()) {
                var_dump($mail);

                // Removing JS session variables from 'sendEmail.php'
                echo "<script>\nsessionStorage.removeItem('emailSubject');\n" .
                     "sessionStorage.removeItem('emailName');\n" .
                     "sessionStorage.removeItem('emailRecipients');\n" .
                     "sessionStorage.removeItem('emailBody')\n</script>";

                //header("Location: sendEmail.php?success"); // Success: Email sent
            } else {
                var_dump($mail);
                header("Location: sendEmail.php?error"); // Error: Email sending error
            }
        } catch (Exception $e) {
            header("Location: sendEmail.php?error"); // Error: Email sending error
        }
    }

    // Form was not submitted
    else {
        header("Location: sendEmail.php"); // Error: Form not submitted
    }


    // Functions
    function getEmailList($emailRecipientsJSON): array {
        $emailList = array();

        // Adding individual emails to list
        foreach ($emailRecipientsJSON->individualEmails as $email) {
            array_push($emailList, $email);
        }

        // Adding each group to the list
        foreach($emailRecipientsJSON->emailGroups as $emailGroup) {
            $token = strtok($emailGroup, "_"); // Getting type of group

            // Finding type of group
            switch ($token) {

                case "all":
                    $token = strtok("_"); // Getting 'All' group codename

                    // Finding which 'All' group
                    switch ($token) {
                        case "users":
                            $emailList = array_merge($emailList, getAllUserEmails());
                            break;

                        case "clubs":
                            $emailList = array_merge($emailList, getAllClubTeamUserEmails());
                            break;

                        case "programs":
                            $emailList = array_merge($emailList, getAllProgramUserEmails());
                            break;
                    }
                    break;

                case "club":
                    $token = strtok("_"); // Getting ClubID
                    $emailList = array_merge($emailList, getClubUserEmails($token)); // Adding club users to email list
                    break;

                case "team":
                    $token = strtok("_"); // Getting TeamID
                    $emailList = array_merge($emailList, getTeamUserEmails($token)); // Adding team users to email list
                    break;

                case "region":
                    $token = strtok("_"); // Getting LocationID
                    $emailList = array_merge($emailList, getRegionUserEmails($token)); // Adding region users to email list
                    break;

                case "program":
                    $token = strtok("_"); // Getting DevID
                    $emailList = array_merge($emailList, getProgramUserEmails($token)); // Adding program users to email list
                    break;

                case "committee":
                    $token = strtok("_"); // Getting SubID
                    $emailList = array_merge($emailList, getCommitteeUserEmails($token)); // Adding committee users to email list
                    break;
            }
        }

        return array_unique($emailList); // Removing duplicate emails
    }

?>

<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Sending Email...</title>
        <link rel="icon" href="../img/favicon.jpeg">
    </head>
</html>
